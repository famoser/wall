openapi: 3.0.2
info:
  title: ''
  version: 0.0.0
paths:
  /api/events:
    get:
      tags:
        - Event
      operationId: getEventCollection
      summary: 'Retrieves the collection of Event resources.'
      responses:
        200:
          description: 'Event collection response'
          content:
            application/ld+json:
              schema:
                type: object
                properties:
                  'hydra:member': { type: array, items: { $ref: '#/components/schemas/Event:jsonld' } }
                  'hydra:totalItems': { type: integer, minimum: 0 }
                  'hydra:view': { type: object, properties: { '@id': { type: string, format: iri-reference }, '@type': { type: string }, 'hydra:first': { type: string, format: iri-reference }, 'hydra:last': { type: string, format: iri-reference }, 'hydra:next': { type: string, format: iri-reference } } }
                  'hydra:search': { type: object, properties: { '@type': { type: string }, 'hydra:template': { type: string }, 'hydra:variableRepresentation': { type: string }, 'hydra:mapping': { type: array, items: { type: object, properties: { '@type': { type: string }, variable: { type: string }, property: { type: string }, required: { type: boolean } } } } } }
                required:
                  - 'hydra:member'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
            text/html:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
      parameters:
        -
          name: page
          in: query
          required: false
          description: 'The collection page number'
          schema:
            type: integer
            default: 1
    post:
      tags:
        - Event
      operationId: postEventCollection
      summary: 'Creates a Event resource.'
      responses:
        201:
          description: 'Event resource created'
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Event:jsonld'
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
            text/html:
              schema:
                $ref: '#/components/schemas/Event'
          links:
            GetEventItem:
              parameters:
                id: '$response.body#/id'
              operationId: getEventItem
              description: 'The `id` value returned in the response can be used as the `id` parameter in `GET /api/events/{id}`.'
        400:
          description: 'Invalid input'
        404:
          description: 'Resource not found'
      requestBody:
        content:
          application/ld+json:
            schema:
              $ref: '#/components/schemas/Event:jsonld'
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
          text/html:
            schema:
              $ref: '#/components/schemas/Event'
        description: 'The new Event resource'
  '/api/events/{id}':
    get:
      tags:
        - Event
      operationId: getEventItem
      summary: 'Retrieves a Event resource.'
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Event resource response'
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Event:jsonld'
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
            text/html:
              schema:
                $ref: '#/components/schemas/Event'
        404:
          description: 'Resource not found'
    delete:
      tags:
        - Event
      operationId: deleteEventItem
      summary: 'Removes the Event resource.'
      responses:
        204:
          description: 'Event resource deleted'
        404:
          description: 'Resource not found'
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
    put:
      tags:
        - Event
      operationId: putEventItem
      summary: 'Replaces the Event resource.'
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Event resource updated'
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Event:jsonld'
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
            text/html:
              schema:
                $ref: '#/components/schemas/Event'
        400:
          description: 'Invalid input'
        404:
          description: 'Resource not found'
      requestBody:
        content:
          application/ld+json:
            schema:
              $ref: '#/components/schemas/Event:jsonld'
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
          text/html:
            schema:
              $ref: '#/components/schemas/Event'
        description: 'The updated Event resource'
    patch:
      tags:
        - Event
      operationId: patchEventItem
      summary: 'Updates the Event resource.'
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Event resource updated'
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Event:jsonld'
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
            text/html:
              schema:
                $ref: '#/components/schemas/Event'
        400:
          description: 'Invalid input'
        404:
          description: 'Resource not found'
      requestBody:
        content:
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/Event'
        description: 'The updated Event resource'
  /api/products:
    get:
      tags:
        - Product
      operationId: getProductCollection
      summary: 'Retrieves the collection of Product resources.'
      responses:
        200:
          description: 'Product collection response'
          content:
            application/ld+json:
              schema:
                type: object
                properties:
                  'hydra:member': { type: array, items: { $ref: '#/components/schemas/Product:jsonld' } }
                  'hydra:totalItems': { type: integer, minimum: 0 }
                  'hydra:view': { type: object, properties: { '@id': { type: string, format: iri-reference }, '@type': { type: string }, 'hydra:first': { type: string, format: iri-reference }, 'hydra:last': { type: string, format: iri-reference }, 'hydra:next': { type: string, format: iri-reference } } }
                  'hydra:search': { type: object, properties: { '@type': { type: string }, 'hydra:template': { type: string }, 'hydra:variableRepresentation': { type: string }, 'hydra:mapping': { type: array, items: { type: object, properties: { '@type': { type: string }, variable: { type: string }, property: { type: string }, required: { type: boolean } } } } } }
                required:
                  - 'hydra:member'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
            text/html:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
      parameters:
        -
          name: page
          in: query
          required: false
          description: 'The collection page number'
          schema:
            type: integer
            default: 1
    post:
      tags:
        - Product
      operationId: postProductCollection
      summary: 'Creates a Product resource.'
      responses:
        201:
          description: 'Product resource created'
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Product:jsonld'
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
            text/html:
              schema:
                $ref: '#/components/schemas/Product'
          links:
            GetProductItem:
              parameters:
                id: '$response.body#/id'
              operationId: getProductItem
              description: 'The `id` value returned in the response can be used as the `id` parameter in `GET /api/products/{id}`.'
        400:
          description: 'Invalid input'
        404:
          description: 'Resource not found'
      requestBody:
        content:
          application/ld+json:
            schema:
              $ref: '#/components/schemas/Product:jsonld'
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
          text/html:
            schema:
              $ref: '#/components/schemas/Product'
        description: 'The new Product resource'
  '/api/products/{id}':
    get:
      tags:
        - Product
      operationId: getProductItem
      summary: 'Retrieves a Product resource.'
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Product resource response'
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Product:jsonld'
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
            text/html:
              schema:
                $ref: '#/components/schemas/Product'
        404:
          description: 'Resource not found'
    delete:
      tags:
        - Product
      operationId: deleteProductItem
      summary: 'Removes the Product resource.'
      responses:
        204:
          description: 'Product resource deleted'
        404:
          description: 'Resource not found'
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
    put:
      tags:
        - Product
      operationId: putProductItem
      summary: 'Replaces the Product resource.'
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Product resource updated'
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Product:jsonld'
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
            text/html:
              schema:
                $ref: '#/components/schemas/Product'
        400:
          description: 'Invalid input'
        404:
          description: 'Resource not found'
      requestBody:
        content:
          application/ld+json:
            schema:
              $ref: '#/components/schemas/Product:jsonld'
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
          text/html:
            schema:
              $ref: '#/components/schemas/Product'
        description: 'The updated Product resource'
    patch:
      tags:
        - Product
      operationId: patchProductItem
      summary: 'Updates the Product resource.'
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Product resource updated'
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Product:jsonld'
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
            text/html:
              schema:
                $ref: '#/components/schemas/Product'
        400:
          description: 'Invalid input'
        404:
          description: 'Resource not found'
      requestBody:
        content:
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/Product'
        description: 'The updated Product resource'
  /api/questions:
    get:
      tags:
        - Question
      operationId: getQuestionCollection
      summary: 'Retrieves the collection of Question resources.'
      responses:
        200:
          description: 'Question collection response'
          content:
            application/ld+json:
              schema:
                type: object
                properties:
                  'hydra:member': { type: array, items: { $ref: '#/components/schemas/Question:jsonld' } }
                  'hydra:totalItems': { type: integer, minimum: 0 }
                  'hydra:view': { type: object, properties: { '@id': { type: string, format: iri-reference }, '@type': { type: string }, 'hydra:first': { type: string, format: iri-reference }, 'hydra:last': { type: string, format: iri-reference }, 'hydra:next': { type: string, format: iri-reference } } }
                  'hydra:search': { type: object, properties: { '@type': { type: string }, 'hydra:template': { type: string }, 'hydra:variableRepresentation': { type: string }, 'hydra:mapping': { type: array, items: { type: object, properties: { '@type': { type: string }, variable: { type: string }, property: { type: string }, required: { type: boolean } } } } } }
                required:
                  - 'hydra:member'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Question'
            text/html:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Question'
      parameters:
        -
          name: page
          in: query
          required: false
          description: 'The collection page number'
          schema:
            type: integer
            default: 1
    post:
      tags:
        - Question
      operationId: postQuestionCollection
      summary: 'Creates a Question resource.'
      responses:
        201:
          description: 'Question resource created'
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Question:jsonld'
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
            text/html:
              schema:
                $ref: '#/components/schemas/Question'
          links:
            GetQuestionItem:
              parameters:
                id: '$response.body#/id'
              operationId: getQuestionItem
              description: 'The `id` value returned in the response can be used as the `id` parameter in `GET /api/questions/{id}`.'
        400:
          description: 'Invalid input'
        404:
          description: 'Resource not found'
      requestBody:
        content:
          application/ld+json:
            schema:
              $ref: '#/components/schemas/Question:jsonld'
          application/json:
            schema:
              $ref: '#/components/schemas/Question'
          text/html:
            schema:
              $ref: '#/components/schemas/Question'
        description: 'The new Question resource'
  '/api/questions/{id}':
    get:
      tags:
        - Question
      operationId: getQuestionItem
      summary: 'Retrieves a Question resource.'
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Question resource response'
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Question:jsonld'
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
            text/html:
              schema:
                $ref: '#/components/schemas/Question'
        404:
          description: 'Resource not found'
    delete:
      tags:
        - Question
      operationId: deleteQuestionItem
      summary: 'Removes the Question resource.'
      responses:
        204:
          description: 'Question resource deleted'
        404:
          description: 'Resource not found'
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
    put:
      tags:
        - Question
      operationId: putQuestionItem
      summary: 'Replaces the Question resource.'
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Question resource updated'
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Question:jsonld'
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
            text/html:
              schema:
                $ref: '#/components/schemas/Question'
        400:
          description: 'Invalid input'
        404:
          description: 'Resource not found'
      requestBody:
        content:
          application/ld+json:
            schema:
              $ref: '#/components/schemas/Question:jsonld'
          application/json:
            schema:
              $ref: '#/components/schemas/Question'
          text/html:
            schema:
              $ref: '#/components/schemas/Question'
        description: 'The updated Question resource'
    patch:
      tags:
        - Question
      operationId: patchQuestionItem
      summary: 'Updates the Question resource.'
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Question resource updated'
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Question:jsonld'
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
            text/html:
              schema:
                $ref: '#/components/schemas/Question'
        400:
          description: 'Invalid input'
        404:
          description: 'Resource not found'
      requestBody:
        content:
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/Question'
        description: 'The updated Question resource'
  /api/settings:
    get:
      tags:
        - Setting
      operationId: getSettingCollection
      summary: 'Retrieves the collection of Setting resources.'
      responses:
        200:
          description: 'Setting collection response'
          content:
            application/ld+json:
              schema:
                type: object
                properties:
                  'hydra:member': { type: array, items: { $ref: '#/components/schemas/Setting:jsonld' } }
                  'hydra:totalItems': { type: integer, minimum: 0 }
                  'hydra:view': { type: object, properties: { '@id': { type: string, format: iri-reference }, '@type': { type: string }, 'hydra:first': { type: string, format: iri-reference }, 'hydra:last': { type: string, format: iri-reference }, 'hydra:next': { type: string, format: iri-reference } } }
                  'hydra:search': { type: object, properties: { '@type': { type: string }, 'hydra:template': { type: string }, 'hydra:variableRepresentation': { type: string }, 'hydra:mapping': { type: array, items: { type: object, properties: { '@type': { type: string }, variable: { type: string }, property: { type: string }, required: { type: boolean } } } } } }
                required:
                  - 'hydra:member'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Setting'
            text/html:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Setting'
      parameters:
        -
          name: page
          in: query
          required: false
          description: 'The collection page number'
          schema:
            type: integer
            default: 1
    post:
      tags:
        - Setting
      operationId: postSettingCollection
      summary: 'Creates a Setting resource.'
      responses:
        201:
          description: 'Setting resource created'
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Setting:jsonld'
            application/json:
              schema:
                $ref: '#/components/schemas/Setting'
            text/html:
              schema:
                $ref: '#/components/schemas/Setting'
          links:
            GetSettingItem:
              parameters:
                id: '$response.body#/id'
              operationId: getSettingItem
              description: 'The `id` value returned in the response can be used as the `id` parameter in `GET /api/settings/{id}`.'
        400:
          description: 'Invalid input'
        404:
          description: 'Resource not found'
      requestBody:
        content:
          application/ld+json:
            schema:
              $ref: '#/components/schemas/Setting:jsonld'
          application/json:
            schema:
              $ref: '#/components/schemas/Setting'
          text/html:
            schema:
              $ref: '#/components/schemas/Setting'
        description: 'The new Setting resource'
  '/api/settings/{id}':
    get:
      tags:
        - Setting
      operationId: getSettingItem
      summary: 'Retrieves a Setting resource.'
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Setting resource response'
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Setting:jsonld'
            application/json:
              schema:
                $ref: '#/components/schemas/Setting'
            text/html:
              schema:
                $ref: '#/components/schemas/Setting'
        404:
          description: 'Resource not found'
    delete:
      tags:
        - Setting
      operationId: deleteSettingItem
      summary: 'Removes the Setting resource.'
      responses:
        204:
          description: 'Setting resource deleted'
        404:
          description: 'Resource not found'
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
    put:
      tags:
        - Setting
      operationId: putSettingItem
      summary: 'Replaces the Setting resource.'
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Setting resource updated'
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Setting:jsonld'
            application/json:
              schema:
                $ref: '#/components/schemas/Setting'
            text/html:
              schema:
                $ref: '#/components/schemas/Setting'
        400:
          description: 'Invalid input'
        404:
          description: 'Resource not found'
      requestBody:
        content:
          application/ld+json:
            schema:
              $ref: '#/components/schemas/Setting:jsonld'
          application/json:
            schema:
              $ref: '#/components/schemas/Setting'
          text/html:
            schema:
              $ref: '#/components/schemas/Setting'
        description: 'The updated Setting resource'
    patch:
      tags:
        - Setting
      operationId: patchSettingItem
      summary: 'Updates the Setting resource.'
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Setting resource updated'
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Setting:jsonld'
            application/json:
              schema:
                $ref: '#/components/schemas/Setting'
            text/html:
              schema:
                $ref: '#/components/schemas/Setting'
        400:
          description: 'Invalid input'
        404:
          description: 'Resource not found'
      requestBody:
        content:
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/Setting'
        description: 'The updated Setting resource'
  /api/tasks:
    get:
      tags:
        - Task
      operationId: getTaskCollection
      summary: 'Retrieves the collection of Task resources.'
      responses:
        200:
          description: 'Task collection response'
          content:
            application/ld+json:
              schema:
                type: object
                properties:
                  'hydra:member': { type: array, items: { $ref: '#/components/schemas/Task:jsonld' } }
                  'hydra:totalItems': { type: integer, minimum: 0 }
                  'hydra:view': { type: object, properties: { '@id': { type: string, format: iri-reference }, '@type': { type: string }, 'hydra:first': { type: string, format: iri-reference }, 'hydra:last': { type: string, format: iri-reference }, 'hydra:next': { type: string, format: iri-reference } } }
                  'hydra:search': { type: object, properties: { '@type': { type: string }, 'hydra:template': { type: string }, 'hydra:variableRepresentation': { type: string }, 'hydra:mapping': { type: array, items: { type: object, properties: { '@type': { type: string }, variable: { type: string }, property: { type: string }, required: { type: boolean } } } } } }
                required:
                  - 'hydra:member'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
            text/html:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
      parameters:
        -
          name: page
          in: query
          required: false
          description: 'The collection page number'
          schema:
            type: integer
            default: 1
    post:
      tags:
        - Task
      operationId: postTaskCollection
      summary: 'Creates a Task resource.'
      responses:
        201:
          description: 'Task resource created'
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Task:jsonld'
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
            text/html:
              schema:
                $ref: '#/components/schemas/Task'
          links:
            GetTaskItem:
              parameters:
                id: '$response.body#/id'
              operationId: getTaskItem
              description: 'The `id` value returned in the response can be used as the `id` parameter in `GET /api/tasks/{id}`.'
        400:
          description: 'Invalid input'
        404:
          description: 'Resource not found'
      requestBody:
        content:
          application/ld+json:
            schema:
              $ref: '#/components/schemas/Task:jsonld'
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
          text/html:
            schema:
              $ref: '#/components/schemas/Task'
        description: 'The new Task resource'
  '/api/tasks/{id}':
    get:
      tags:
        - Task
      operationId: getTaskItem
      summary: 'Retrieves a Task resource.'
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Task resource response'
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Task:jsonld'
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
            text/html:
              schema:
                $ref: '#/components/schemas/Task'
        404:
          description: 'Resource not found'
    delete:
      tags:
        - Task
      operationId: deleteTaskItem
      summary: 'Removes the Task resource.'
      responses:
        204:
          description: 'Task resource deleted'
        404:
          description: 'Resource not found'
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
    put:
      tags:
        - Task
      operationId: putTaskItem
      summary: 'Replaces the Task resource.'
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Task resource updated'
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Task:jsonld'
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
            text/html:
              schema:
                $ref: '#/components/schemas/Task'
        400:
          description: 'Invalid input'
        404:
          description: 'Resource not found'
      requestBody:
        content:
          application/ld+json:
            schema:
              $ref: '#/components/schemas/Task:jsonld'
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
          text/html:
            schema:
              $ref: '#/components/schemas/Task'
        description: 'The updated Task resource'
    patch:
      tags:
        - Task
      operationId: patchTaskItem
      summary: 'Updates the Task resource.'
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Task resource updated'
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Task:jsonld'
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
            text/html:
              schema:
                $ref: '#/components/schemas/Task'
        400:
          description: 'Invalid input'
        404:
          description: 'Resource not found'
      requestBody:
        content:
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/Task'
        description: 'The updated Task resource'
  /api/users:
    get:
      tags:
        - User
      operationId: getUserCollection
      summary: 'Retrieves the collection of User resources.'
      responses:
        200:
          description: 'User collection response'
          content:
            application/ld+json:
              schema:
                type: object
                properties:
                  'hydra:member': { type: array, items: { $ref: '#/components/schemas/User:jsonld' } }
                  'hydra:totalItems': { type: integer, minimum: 0 }
                  'hydra:view': { type: object, properties: { '@id': { type: string, format: iri-reference }, '@type': { type: string }, 'hydra:first': { type: string, format: iri-reference }, 'hydra:last': { type: string, format: iri-reference }, 'hydra:next': { type: string, format: iri-reference } } }
                  'hydra:search': { type: object, properties: { '@type': { type: string }, 'hydra:template': { type: string }, 'hydra:variableRepresentation': { type: string }, 'hydra:mapping': { type: array, items: { type: object, properties: { '@type': { type: string }, variable: { type: string }, property: { type: string }, required: { type: boolean } } } } } }
                required:
                  - 'hydra:member'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
            text/html:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
      parameters:
        -
          name: page
          in: query
          required: false
          description: 'The collection page number'
          schema:
            type: integer
            default: 1
    post:
      tags:
        - User
      operationId: postUserCollection
      summary: 'Creates a User resource.'
      responses:
        201:
          description: 'User resource created'
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/User:jsonld'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            text/html:
              schema:
                $ref: '#/components/schemas/User'
          links:
            GetUserItem:
              parameters:
                id: '$response.body#/id'
              operationId: getUserItem
              description: 'The `id` value returned in the response can be used as the `id` parameter in `GET /api/users/{id}`.'
        400:
          description: 'Invalid input'
        404:
          description: 'Resource not found'
      requestBody:
        content:
          application/ld+json:
            schema:
              $ref: '#/components/schemas/User:jsonld'
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          text/html:
            schema:
              $ref: '#/components/schemas/User'
        description: 'The new User resource'
  '/api/users/{id}':
    get:
      tags:
        - User
      operationId: getUserItem
      summary: 'Retrieves a User resource.'
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'User resource response'
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/User:jsonld'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            text/html:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: 'Resource not found'
    delete:
      tags:
        - User
      operationId: deleteUserItem
      summary: 'Removes the User resource.'
      responses:
        204:
          description: 'User resource deleted'
        404:
          description: 'Resource not found'
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
    put:
      tags:
        - User
      operationId: putUserItem
      summary: 'Replaces the User resource.'
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'User resource updated'
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/User:jsonld'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            text/html:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: 'Invalid input'
        404:
          description: 'Resource not found'
      requestBody:
        content:
          application/ld+json:
            schema:
              $ref: '#/components/schemas/User:jsonld'
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          text/html:
            schema:
              $ref: '#/components/schemas/User'
        description: 'The updated User resource'
    patch:
      tags:
        - User
      operationId: patchUserItem
      summary: 'Updates the User resource.'
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'User resource updated'
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/User:jsonld'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            text/html:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: 'Invalid input'
        404:
          description: 'Resource not found'
      requestBody:
        content:
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/User'
        description: 'The updated User resource'
components:
  schemas:
    Event:
      type: object
      description: ''
      required:
        - name
        - startAt
      properties:
        name:
          type: string
        startAt:
          type: string
          format: date-time
        id:
          readOnly: true
          description: 'will be null when not inserted into the db yet'
          type: string
        persistedInDatabase:
          readOnly: true
          type: boolean
        createdAt:
          readOnly: true
          type: string
          format: date-time
        lastChangedAt:
          readOnly: true
          type: string
          format: date-time
    'Event:jsonld':
      type: object
      description: ''
      required:
        - name
        - startAt
      properties:
        '@context':
          readOnly: true
          type: string
        '@id':
          readOnly: true
          type: string
        '@type':
          readOnly: true
          type: string
        name:
          type: string
        startAt:
          type: string
          format: date-time
        id:
          readOnly: true
          description: 'will be null when not inserted into the db yet'
          type: string
        persistedInDatabase:
          readOnly: true
          type: boolean
        createdAt:
          readOnly: true
          type: string
          format: date-time
        lastChangedAt:
          readOnly: true
          type: string
          format: date-time
    Product:
      type: object
      description: ''
      required:
        - name
        - active
      properties:
        name:
          type: string
        category:
          type: integer
        active:
          type: boolean
        id:
          readOnly: true
          description: 'will be null when not inserted into the db yet'
          type: string
        persistedInDatabase:
          readOnly: true
          type: boolean
        createdAt:
          readOnly: true
          type: string
          format: date-time
        lastChangedAt:
          readOnly: true
          type: string
          format: date-time
    'Product:jsonld':
      type: object
      description: ''
      required:
        - name
        - active
      properties:
        '@context':
          readOnly: true
          type: string
        '@id':
          readOnly: true
          type: string
        '@type':
          readOnly: true
          type: string
        name:
          type: string
        category:
          type: integer
        active:
          type: boolean
        id:
          readOnly: true
          description: 'will be null when not inserted into the db yet'
          type: string
        persistedInDatabase:
          readOnly: true
          type: boolean
        createdAt:
          readOnly: true
          type: string
          format: date-time
        lastChangedAt:
          readOnly: true
          type: string
          format: date-time
    Question:
      type: object
      description: ''
      required:
        - text
      properties:
        text:
          type: string
        repetition:
          type: integer
        id:
          readOnly: true
          description: 'will be null when not inserted into the db yet'
          type: string
        persistedInDatabase:
          readOnly: true
          type: boolean
        createdAt:
          readOnly: true
          type: string
          format: date-time
        lastChangedAt:
          readOnly: true
          type: string
          format: date-time
    'Question:jsonld':
      type: object
      description: ''
      required:
        - text
      properties:
        '@context':
          readOnly: true
          type: string
        '@id':
          readOnly: true
          type: string
        '@type':
          readOnly: true
          type: string
        text:
          type: string
        repetition:
          type: integer
        id:
          readOnly: true
          description: 'will be null when not inserted into the db yet'
          type: string
        persistedInDatabase:
          readOnly: true
          type: boolean
        createdAt:
          readOnly: true
          type: string
          format: date-time
        lastChangedAt:
          readOnly: true
          type: string
          format: date-time
    Setting:
      type: object
      description: ''
      required:
        - key
        - value
      properties:
        key:
          type: string
        value:
          type: string
        id:
          readOnly: true
          description: 'will be null when not inserted into the db yet'
          type: string
        persistedInDatabase:
          readOnly: true
          type: boolean
        createdAt:
          readOnly: true
          type: string
          format: date-time
        lastChangedAt:
          readOnly: true
          type: string
          format: date-time
    'Setting:jsonld':
      type: object
      description: ''
      required:
        - key
        - value
      properties:
        '@context':
          readOnly: true
          type: string
        '@id':
          readOnly: true
          type: string
        '@type':
          readOnly: true
          type: string
        key:
          type: string
        value:
          type: string
        id:
          readOnly: true
          description: 'will be null when not inserted into the db yet'
          type: string
        persistedInDatabase:
          readOnly: true
          type: boolean
        createdAt:
          readOnly: true
          type: string
          format: date-time
        lastChangedAt:
          readOnly: true
          type: string
          format: date-time
    Task:
      type: object
      description: ''
      required:
        - name
        - reward
        - lastExecutionAt
      properties:
        name:
          type: string
        intervalInDays:
          type: integer
        reward:
          type: integer
        lastExecutionAt:
          type: string
          format: date-time
          nullable: true
        id:
          readOnly: true
          description: 'will be null when not inserted into the db yet'
          type: string
        persistedInDatabase:
          readOnly: true
          type: boolean
        createdAt:
          readOnly: true
          type: string
          format: date-time
        lastChangedAt:
          readOnly: true
          type: string
          format: date-time
    'Task:jsonld':
      type: object
      description: ''
      required:
        - name
        - reward
        - lastExecutionAt
      properties:
        '@context':
          readOnly: true
          type: string
        '@id':
          readOnly: true
          type: string
        '@type':
          readOnly: true
          type: string
        name:
          type: string
        intervalInDays:
          type: integer
        reward:
          type: integer
        lastExecutionAt:
          type: string
          format: date-time
          nullable: true
        id:
          readOnly: true
          description: 'will be null when not inserted into the db yet'
          type: string
        persistedInDatabase:
          readOnly: true
          type: boolean
        createdAt:
          readOnly: true
          type: string
          format: date-time
        lastChangedAt:
          readOnly: true
          type: string
          format: date-time
    User:
      type: object
      description: ''
      required:
        - name
      properties:
        name:
          type: string
        pin:
          type: integer
        karma:
          type: integer
        id:
          readOnly: true
          description: 'will be null when not inserted into the db yet'
          type: string
        persistedInDatabase:
          readOnly: true
          type: boolean
        createdAt:
          readOnly: true
          type: string
          format: date-time
        lastChangedAt:
          readOnly: true
          type: string
          format: date-time
    'User:jsonld':
      type: object
      description: ''
      required:
        - name
      properties:
        '@context':
          readOnly: true
          type: string
        '@id':
          readOnly: true
          type: string
        '@type':
          readOnly: true
          type: string
        name:
          type: string
        pin:
          type: integer
        karma:
          type: integer
        id:
          readOnly: true
          description: 'will be null when not inserted into the db yet'
          type: string
        persistedInDatabase:
          readOnly: true
          type: boolean
        createdAt:
          readOnly: true
          type: string
          format: date-time
        lastChangedAt:
          readOnly: true
          type: string
          format: date-time

